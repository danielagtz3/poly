"""
Student information for this assignment:

Replace <FULL NAME> with your name.
On my/our honor, Daniela Gutierrez, this
programming assignment is my own work and I have not provided this code to
any other student.

I have read and understand the course syllabus's guidelines regarding Academic
Integrity. I understand that if I violate the Academic Integrity policy (e.g.
copy code from someone else, have the code generated by an LLM, or give my
code to someone else), the case shall be submitted to the Office of the Dean of
Students. Academic penalties up to and including an F in the course are likely.

UT EID 1: adg4258
"""


class Node:
    """
    A modified version of the Node class for linked lists (using proper class
    coding practices). Instead of a data instance variable, this node class has both
    a coefficient and an exponent instance variable, which is used to represent each
    term in a polynomial.
    """

    def __init__(self, coeff, exp, link=None):
        """
        Node Constructor for polynomial linked lists.

        Args:
        - coeff: The coefficient of the term.
        - exp: The exponent of the term.
        - link: The next node in the linked list.
        """
        self.coeff = coeff
        self.exp = exp
        self.next = link

    @property
    def coeff(self):
        """
        Getter method for the coefficient attribute.
        """
        return self.__coeff

    @coeff.setter
    def coeff(self, value):
        """
        Setter method for the coefficient attribute.
        """
        if value is None or isinstance(value, int):
            self.__coeff = value
        else:
            raise ValueError("Coefficient must be an integer or None.")

    @property
    def exp(self):
        """
        Getter method for the exponent attribute.
        """
        return self.__exp

    @exp.setter
    def exp(self, value):
        """
        Setter method for the exponent attribute.
        """
        if value is None or isinstance(value, int):
            self.__exp = value
        else:
            raise ValueError("Exponent must be an integer or None.")

    @property
    def next(self):
        """
        Getter method for the next attribute.
        """
        return self.__next

    @next.setter
    def next(self, value):
        """
        Setter method for the next attribute.
        """
        if value is None or isinstance(value, Node):
            self.__next = value
        else:
            raise ValueError("Next must be a Node instance or None.")

    def __str__(self):
        """
        String representation of each term in a polynomial linked list.
        """
        return f"({self.coeff}, {self.exp})"


class LinkedList:
    def __init__(self):
        # You are also welcome to use a sentinel/dummy node!
        # It is definitely recommended, which will we learn more
        # about in class on Monday 10/21. If you choose to use
        # a dummy node, you can comment out the self.head = None
        # and comment in the below line. We use None to make sure
        # if there is an error where you accidentally include the
        # dummy node in your calculation, it will throw an error.
        # self.dummy = Node(None, None)
        self.head = None

    # Insert the term with the coefficient coeff and exponent exp into the polynomial.
    # If a term with that exponent already exists, add the coefficients together.
    # You must keep the terms in descending order by exponent.
    def insert_term(self, coeff, exp):
        # Ignore terms with a 0 coefficient
        if coeff == 0:
            return
        
        # Initialize a new node for the term
        new_node = Node(coeff, exp)

        # Insert new node at the beginning if list is empty or has a lower exponent
        if not self.head or self.head.exp < exp:
            new_node.next = self.head
            self.head = new_node
            return

        # Traverse the list to find the correct position
        current = self.head
        while current.next and current.next.exp > exp:
            current = current.next

        # Update term if the exponent already exists
        if current.exp == exp:
            current.coeff += coeff
            if current.coeff == 0:  # Remove node if coeff becomes 0
                self.delete_node(exp)
        elif current.next and current.next.exp == exp:
            current.next.coeff += coeff
            if current.next.coeff == 0:
                current.next = current.next.next
        else:
            # Insert the term in the correct position
            new_node.next = current.next
            current.next = new_node

    # Add a polynomial p to the polynomial and return the resulting polynomial as a new linked list.
    def add(self, p):
        result = LinkedList()
        c1, c2 = self.head, p.head
        while c1 or c2:
            if c1 and (not c2 or c1.exp > c2.exp):
                result.insert_term(c1.coeff, c1.exp)
                c1 = c1.next
            elif c2 and (not c1 or c2.exp > c1.exp):
                result.insert_term(c2.coeff, c2.exp)
                c2 = c2.next
            else:
                result.insert_term(c1.coeff + c2.coeff, c1.exp)
                c1 = c1.next
                c2 = c2.next
        return result

    # Multiply a polynomial p with the polynomial and return the product as a new linked list.
    def mult(self, p):
        result = LinkedList()
        c1 = self.head
        while c1:
            temp_poly = LinkedList()
            c2 = p.head
            while c2:
                temp_poly.insert_term(c1.coeff * c2.coeff, c1.exp + c2.exp)
                c2 = c2.next
            result = result.add(temp_poly)
            c1 = c1.next
        return result

    # Return a string representation of the polynomial.
    def __str__(self):
        if not self.head:
            return ""
        current = self.head
        terms = []
        while current:
            terms.append(f"({current.coeff}, {current.exp})")
            current = current.next
        return " + ".join(terms)


def main():
    # read data from stdin using input() and create polynomial p
    n = int(input().strip())  # read the number of terms in polynomial p
    p = LinkedList()
    for _ in range(n):
        coeff, exp = map(int, input().strip().split())  # read each term's coefficient and exponent
        p.insert_term(coeff, exp)
    # read blank line separator between polynomials
    input()
    # read data from stdin using input() and create polynomial q
    m = int(input().strip())  # read the number of terms in polynomial q
    q = LinkedList()
    for _ in range(m):
        coeff, exp = map(int, input().strip().split())  # read each term's coefficient and exponent
        q.insert_term(coeff, exp)
    # get sum of p and q as a new linked list and print sum
    sum_poly = p.add(q)
    print(sum_poly)
    # get product of p and q as a new linked list and print product
    prod_poly = p.mult(q)
    print(prod_poly)


if __name__ == "__main__":
    main()
